[{"title":"github笔记","url":"/posts/1017553822.html","content":"\n> github 能干啥 ？它是一个工具，具体来说是版本管理工具。基于这个出发点去思考的话，github似乎也就是做一些版本管理的事儿。\n\n1. 前言\n> 首先，你得确保电脑上安装了github。安装方法有很多,github[官方网站](https://www.github.com)\n\n2. 常用命令\n~~~ bash\n# 初始化\ngit init\n\n# 配置信息\ngit config --global user.email \"your@example.com\"\ngit config --global user.name \"your name\"\n\n# 查看当前的状态\ngit status\n\n# 添加所有文件\ngit add .\n\n# 添加指定文件\ngit add xxx.lua\n\n# 提交\ngit commit -m \"日志信息\"\n\n# 推送\ngit push\n\n# 拉取\ngit pull\n\n# 查看日志\ngit log \n\n# 查看日志ref\ngit reflog\n\n# 回滚\ngit reset --hard <[git log]后面的全贴上>\n\n# 回滚\ngit reset --hard <[git reflog]前面的全贴上>\n\n\n# 分支\n#1.切换分支\ngit checkout master\n\n#2.合并分支\ngit merge dev\n\n#3.删除分支\ngit branch -d bug\n\n#4.查看当前分支\ngit branch\n\n#5.创建分支\ngit branch bug\n\n# github克隆/推送\n\n#1.给远程仓库起别名\ngit remote add origin  远程仓库地址\n\n#2.推送\ngit push\ngit push -u origin 分支\n\n#3.克隆代码\ngit clone 远程仓库地址\n\n#4.切换分支\ngit checkout 分支\n\n#5.资源拉取\ngit pull\ngit pull origin 分支\n\ngit fetch origin dev\ngit merge origin/dev\n\ngit rebase -i 版本号\ngit rebase -i HEAD ~3\npick > s\n\ngit log --graph --pertty=format:\"%h %s\"\n\ngit pull origin dev\n\ngit fetch origin dev\ngit rebase origin/dev\n\n# 变基\ngit rebase 分支\n\n# 解决完冲突之后\ngit rebase --continue\n\n# Beyond Compare\n# 1.安装Beyond Compare3\n\n# 2.配置信息\ngit config --local merge.tool bc3\ngit config --local mergetool.path '/usr/local/bin/bcomp'\ngit config --local mergetool.keepBackup false\n\n# 3.应用bc3解决冲突\ngit mergetool\n\n# tag\ngit tag -a v2 -m \"tag信息\"\ngit push origin --tags\n\n#维护\ngit clone -b v2 地址\n\n#配置\n1.本项目生效 /项目/.git/config\ngit config --local user.name\ngit config --local user.emal\n\n2.全局 ~/.gitconfig\ngit config --global user.name\ngit config --global user.emal\n\n3.系统 /etc/.gitconfig (sudo权限)\ngit config --system user.name\ngit config --system user.emal\n\n# 免密登录\n# 1.URL\n# 原始地址 https://github.com/yourname/project.git\n# 修改地址 https://用户名:密码@github.coim/yourname/project.git\n\ngit remote add origin https://用户名:密码@github.coim/yourname/project.git\ngit push origin master\n\n# 2.SSH实现\n# 1.生成公钥和私钥(~/.ssh/id_rsa.pub 目录下 id_rsa.pub 公钥 id_ras私钥)\nssh-keygen -r rsa\n\n# 2.拷贝公钥内容，并设置到github SSH and GPG keys\n\n# 3.在git 本地配置ssh地址\ngit remote add origin git@github.com:yourname/project.git\n\ngit push origin master\n\n# 4.git自动管理凭证\nMac OS X >> 钥匙串\n\n# git忽略文件\n# 在项目根目录下创建 .gitignore\n```\n*.h\nxx.h\naa.lua\n!a.h\nfiles/\n*.py[c|a|d]\n.gitignore\n```\n~~~\n参考gitignore[官方网站](https://github.coim/gitub/gitignore)\n\n3. 生成静态网页\n> 首先得确保已经安装了最新的node.js.\n参考hexo[官方网站](https://hexo.io)\n~~~\n# 检查node.js版本\nnode -v\n\n# 检查npm版本\nnpm -v\n\n# 安装hexo\nnpm install -g hexo-cli\n\n# 新建一个project\nhexo init project\n\n# 进入目录\ncd project\n\n# 初始化\nnpm install\n\n# 启动\nhexo server\n\n# 帮助\nhexo help\n~~~\n\n- 常用命令\n~~~ sh\n# 新建文章\nhexo new \"新建文章名字\"\n\n# 新建页面\nhexo new page \"新建页面名字\"\n\n# 生产静态页面至 public 目录\nhexo generate\n\n# 开启预览访问端口\nhexo server\n\n# 部署到github\nhexo deploy\n\n# 查看帮助\nhexo help\n\n# 查看hexo版本\nhexo version\n~~~\n\n- 命令缩写\n~~~ sh\nhexo n # hexo new\nhexo g # hexo generate\nhexo s # hexo server\nhexo d # hexo deploy\n~~~\n\n- 组合命令\n~~~ sh\nhexo s -g # 生成本地预览\nhexo d -g # 生成并上传到github\n~~~\n\n- 配置文件\n1) 在本地生成 ssh key\n2) 在github的设置里新增 ssh key\n3) 在 _config.yml 文件中新增\n~~~ yml\ndeploy:\n  type: git\n  repository: git@github.com:yourname/yourname.github.io.git\n  branch: master\n~~~\n\n\n[Hexo从0到1搭建技术博客](https://edu.csdn.net/course/detail/35315)\n\n1) 安装hexo-abbrlink插件\n~~~sh\n\tnpm install hexo-abbrlink --save\n~~~\n2) 在 _config.yml 文件中新增\n~~~ yml\n# permalink: :year/:month/:day/:title/\npermalink: posts/:abbrlink.html\nabbrlink:\n  alg: crc32\n  rep: dec\n~~~\n\n3) 发布插件 hexo-deployer-git\n~~~sh\nnpm install hexo-deployer-git --save\n~~~\n\n4. 任务管理\n\n- issues\n  文档以及任务管理\n\n- wiki\n  在线文档\n","tags":["git"]}]